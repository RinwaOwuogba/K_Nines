{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","components/minter/nfts/Add.js","assets/img/dead.svg","components/minter/nfts/options.js","components/minter/nfts/Card.js","components/ui/Loader.js","utils/minter.js","assets/happy_puppy_barks.wav","assets/hungry_puppy.wav","components/minter/nfts/index.js","hooks/useDoggoContract.js","hooks/useContract.js","assets/img/background.jpg","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","AddNfts","save","useState","setName","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","value","Footer","disabled","Options","other_qualia","pet","feed","revive","units","last_pet","last_fed","index","fedPercent","setFedPercent","petPercent","setPetPercent","isDead","setIsDead","calc_percent","time_of_last_action","setter","a","stateUnit","Number","Math","round","Date","now","diff","is_dead","Card","Text","skullImg","color","Row","Col","ProgressBar","minWidth","top","left","marginRight","transform","fontWeight","NftCard","nft","client_address","image","owner","Badge","bg","objectFit","Loader","role","createNft","minterContract","performActions","kit","defaultAccount","methods","create_k9","send","from","transaction","getNfts","nfts","totalSupply","call","nftsLength","i","Promise","resolve","tokenURI","meta","uri","JSON","parse","atob","split","replaceAll","fetchNftOwner","push","all","ownerOf","fetchUnitStates","state_unit","death_unit","deathUnit","revive_price","BigNumber","revive_k_nine","price","toString","feed_k_nine","feed_doggo","pet_k_nine","pet_doggo","NftList","useContractKit","setNfts","loading","setLoading","setUnits","onlyMine","setOnlyMine","getAssets","useCallback","allNfts","error","addNft","data","toast","petK9","happy","Audio","play","feedK9","hunger","reviveK9","Add","xs","sm","lg","filter","_nft","map","useDoggoContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","useContract","Doggo","DoggoAddress","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","description","document","getElementById"],"mappings":"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","file":"static/js/main.a1ed3afb.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\n\n\nconst AddNfts = ({ save, address }) => {\n    const [name, setName] = useState(\"\");\n    const [show, setShow] = useState(false);\n\n    // check if all form data has been filled\n  const isFormFilled = () =>\n  name.length >= 2;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n    \n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"link\"\n        className=\"rounded-pill px-2 py-2\"\n      >\n        <h1 className=\"fs-4 fw-bold mb-0 text-dark\">{\"Get a K_nine 🐾\"}</h1> \n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Get a K_nine 🐾</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>           \n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;","export default __webpack_public_path__ + \"static/media/dead.4ffad28e.svg\";","import React, { useState, useEffect } from \"react\";\nimport skullImg from \"../../../assets/img/dead.svg\";\nimport PropTypes from \"prop-types\"; //Row\nimport { Card, Col, Row, ProgressBar, Button } from \"react-bootstrap\";\n\nconst Options = ({ other_qualia, pet, feed, revive, units }) => {\n  const { last_pet, last_fed, index } = other_qualia;\n  const [fedPercent, setFedPercent] = useState(0);\n  const [petPercent, setPetPercent] = useState(0);\n  const [isDead, setIsDead] = useState(false)\n\n  console.log(last_fed, last_pet, \"horah\")\n\n\n  \n\n  useEffect(() => {\n    const calc_percent = async (time_of_last_action, setter) => {\n\n      const stateUnit = Number(units[\"stateUnit\"] ) \n      const current = Math.round(Date.now() / 1000);\n  \n      const diff = (stateUnit + Number(time_of_last_action)) - current\n      console.log(diff)\n  \n      if (diff < 0) setter(0)\n      else{\n        setter((diff / stateUnit ) * 100)\n      }\n    }\n    calc_percent(last_fed, setFedPercent)\n    calc_percent(last_pet, setPetPercent)\n\n  }, [last_fed, last_pet, units]);\n\n  useEffect(() => {\n    const is_dead = async (last_fed, setter) => {\n\n      const stateUnit = Number(units[\"deathUnit\"] ) \n      const current = Math.round(Date.now() / 1000);\n  \n      setIsDead((stateUnit + Number(last_fed)) < current)\n\n    }\n    is_dead(last_fed)\n  }, [last_fed, units]);\n\n\n  return (! isDead ? <>\n          <Card.Text className=\"flex-grow-1\">\n        <div className=\"mb-3\">\n        \n        \n        <ProgressBar style={{ position: \"relative\" }}>\n        <ProgressBar variant={fedPercent > 51 ? \"success\" : \"danger\"} now={fedPercent}  style={{ minWidth: 10}} />\n         \n          <p\n            style={{\n              position: \"absolute\",\n              top: \"50%\",\n              left: \"50%\",\n              marginRight: \"-50%\",\n              transform: \"translate(-50%, -50%)\",\n              color: \"white\",\n              fontWeight: \"bold\"\n            }}\n          >\n            Hunger\n          </p>\n        </ProgressBar>\n        </div>\n        \n        \n      \n        <div>\n          <ProgressBar style={{ position: \"relative\" }}>\n          <ProgressBar variant={petPercent > 51 ? \"success\" : \"danger\"} now={petPercent}  style={{ minWidth: 10}} />\n          \n            <p\n              style={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                marginRight: \"-50%\",\n                transform: \"translate(-50%, -50%)\",\n                color: \"white\",\n                fontWeight: \"bold\"\n              }}\n            >\n              Happiness\n            </p>\n          </ProgressBar>\n      </div>\n            {/* </Stack> */}\n          </Card.Text>\n          <div>\n            <Row className=\"mt-2\">\n                <Col key={\"first\"}>\n                <Button onClick={() => feed(index)} variant=\"primary\">Feed</Button>{' '}\n              </Col>\n              <Col key={\"second\"}>\n              <Button onClick={() => pet(index)} variant=\"primary\">Pet</Button>{' '}\n                </Col>\n            </Row>\n          </div></> :\n    <>\n          <Card.Text className=\"flex-grow-1\">\n            {/* <Badge bg=\"secondary\"> Dead </Badge> */}\n            <div>\n          <img src={skullImg} alt={\"dead\"} style={{ width: 32, height: \"auto\", color: \"red\"}} />\n            </div>\n            {/* </Stack> */}\n          </Card.Text>\n          <div>\n            <Row className=\"mt-2\">\n                <Col key={\"test\"}>\n                <Button onClick={() => revive(index)} variant=\"danger\">Revive</Button>\n              </Col>\n            </Row>\n          </div>\n          </>\n  );\n};\n\nOptions.propTypes = {\n  // props passed into this component\n  other_qualia: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Options;\n","import React from \"react\";\nimport PropTypes from \"prop-types\"; //Row\nimport { Card, Col, Badge, Stack, Row, ProgressBar, Button} from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\nimport Options from \"./options\";\n\nconst NftCard = ({ nft , pet, feed, revive, units, client_address}) => {\n  const { image, owner, name, index, last_fed, last_pet} = nft;\n\n  return (\n    <Col key={index}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {index} ID\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={name} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          {console.log(last_pet)}\n\n          { client_address === owner ?\n            <Options other_qualia={{ last_pet: last_pet, last_fed: last_fed, index: index }} pet={pet} feed={feed} units={units} revive={revive} />\n            : <></>\n          }\n\n\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import BigNumber from \"bignumber.js\"\n\n\nconst format_data = uri => JSON.parse(atob(uri.split('base64,')[1]).replaceAll(\"'\", '\"'));\n\n\nexport const createNft = async (\n    minterContract,\n    performActions,\n    { name }\n  ) => {\n    await performActions(async (kit) => {\n      if (!name) return;\n      const { defaultAccount } = kit;\n  \n      try {\n        \n        // mint the NFT\n        let transaction = await minterContract.methods.create_k9(name)\n          .send({ from: defaultAccount });\n  \n        return transaction;\n      } catch (error) {\n        throw error\n      }\n    });\n};\n  \n\n\n  export const getNfts = async (minterContract) => {\n    try {\n      const nfts = [];\n      console.log(\"oho\")\n      const nftsLength = await minterContract.methods.totalSupply().call();\n\n      for (let i = 0; i < Number(nftsLength); i++) {\n        const nft = new Promise(async (resolve) => {\n          let meta = await minterContract.methods.tokenURI(i).call();\n          meta = format_data(meta)\n          console.log(meta)\n          const owner = await fetchNftOwner(minterContract, i);\n          \n          resolve({\n            index: i,\n            owner,\n            name: meta.name,\n            image: meta.image,\n            last_fed: meta.last_fed,\n            last_pet: meta.last_pet\n          });\n        });\n        nfts.push(nft);\n      }\n      return Promise.all(nfts);\n    } catch (e) {\n      throw e\n    }\n  };\n\n  export const fetchNftOwner = async (minterContract, index) => {\n    try {\n      return await minterContract.methods.ownerOf(index).call();\n    } catch (e) {\n      throw e\n    }\n  };\n\n  export const fetchUnitStates = async (minterContract) => {\n    try {\n      const stateUnit = await minterContract.methods.state_unit().call()\n      const deathUnit = await minterContract.methods.death_unit().call()\n      console.log(\"jajja\")\n      console.log(stateUnit, \"---\")\n      return {stateUnit:stateUnit, deathUnit:deathUnit}\n        \n    } catch (e) {\n      throw e\n      }\n    }\n\nconst revive_price = new BigNumber(\"4\").shiftedBy(18)\n\n  export const revive_k_nine = async (minterContract, performActions,index, price=revive_price) => {\n    await performActions(async (kit) => {\n      console.log(revive_price.toFixed(), \"price\")\n      const { defaultAccount } = kit;\n  \n      try {\n        \n        let transaction = await minterContract.methods.revive(index)\n          .send({\n            from: defaultAccount\n            , value: price.toString()\n          });\n  \n        return transaction;\n      }\n      catch (error) {\n        throw error\n      }\n    })\n  }\n  \n  export const feed_k_nine = async (minterContract, performActions, index) => {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      try {\n        let transaction = await minterContract.methods.feed_doggo(index)\n          .send({ from: defaultAccount });\n        \n        return transaction\n    }\n    catch (e) {\n      throw e\n    }\n      })\n  }\n\n  export const pet_k_nine = async (minterContract, performActions, index) => {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      try {\n        let transaction = await minterContract.methods.pet_doggo(index)\n        .send({from: defaultAccount})\n\n        return transaction\n    }\n    catch (e) {\n      throw e\n    }\n      })\n  }\n","export default __webpack_public_path__ + \"static/media/happy_puppy_barks.8561a64f.wav\";","export default __webpack_public_path__ + \"static/media/hungry_puppy.08f49e2a.wav\";","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  pet_k_nine,\n  feed_k_nine,\n  revive_k_nine,\n  fetchUnitStates,\n} from \"../../../utils/minter\";\nimport { Row, Button } from \"react-bootstrap\";\n\nimport happy from \"../../../assets/happy_puppy_barks.wav\";\nimport hunger from \"../../../assets/hungry_puppy.wav\";\n\n\nconst NftList = ({ minterContract, name }) => {\n    const { performActions, address } = useContractKit();\n    const [nfts, setNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [units, setUnits] = useState({})\n    const [onlyMine, setOnlyMine] = useState(false)\n\n    \n\n    const getAssets = useCallback(async () => {\n        try {\n          setLoading(true);\n          const allNfts = await getNfts(minterContract);\n          if (!allNfts) return;\n          const units = await fetchUnitStates(minterContract)\n          setUnits(units)\n          setNfts(allNfts);\n        } catch (error) {\n          console.log({ error });\n        } finally {\n          setLoading(false);\n        }\n    }, [minterContract]);\n  \n    // const fetchStates = useCallback(async () => {\n      \n    //   if (minterContract) {\n    //     console.log(\"here\")\n    //     const states = \n    //     console.log(states)\n    //     return states\n    //   }\n    // }, [minterContract])\n\n    const addNft = async (data) => {\n        try {\n            setLoading(true);\n            await createNft(minterContract, performActions, data);\n            toast(<NotificationSuccess text=\"Updating K_nines....\" />);\n            getAssets();\n        } catch (error) {\n            console.log({ error });\n            toast(<NotificationError text=\"Failed to create K_nine. Try Again\" />);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const petK9 = async (index) => {\n      try {\n            setLoading(true);\n            await pet_k_nine(minterContract, performActions, index);\n            toast(<NotificationSuccess text=\"Your K_nine is happy....\" />);\n            console.log(happy)\n            new Audio(happy).play();\n            getAssets();\n        } catch (error) {\n          console.log({ error });\n          toast(<NotificationError text=\"Failed to Pet, try again\" />);\n      } finally {\n          setLoading(false);\n     }\n    }\n  \n    const feedK9 = async index => {\n      try {\n            setLoading(true);\n            await feed_k_nine(minterContract, performActions, index);\n            toast(<NotificationSuccess text=\"Your K_nine is fed....\" />);\n            new Audio(hunger).play();\n            getAssets();\n        } catch (error) {\n          console.log({ error });\n          toast(<NotificationError text=\"Failed to feed k_nine, try again\" />);\n      } finally {\n          setLoading(false);\n     }\n    }\n  \n  const reviveK9 = async index =>{\n    try {\n            setLoading(true);\n            await revive_k_nine(minterContract, performActions, index);\n            toast(<NotificationSuccess text=\"K_nine successfully revived be better \" />);\n            getAssets();\n        } catch (error) {\n          console.log({ error });\n          toast(<NotificationError text=\"Failed to revive K9, try again\" />);\n      } finally {\n          setLoading(false);\n      }\n    }\n      \n      useEffect(() => {\n        try {\n          if (address && minterContract) {\n            getAssets();\n          }\n        } catch (error) {\n          console.log({ error });\n        }\n      }, [minterContract, address, getAssets]);\n  \n\n      \n      if (address) {\n        return (\n          <>\n            {!loading ? (\n              <>\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\n                  <Button variant=\"link\" onClick={() => {setOnlyMine(false)}}><h1 className=\"fs-4 fw-bold mb-0 text-dark\">{name}</h1> </Button>\n                  <Button variant=\"link\" onClick={() => setOnlyMine(true)}><h1 className=\"fs-4 fw-bold mb-0 text-dark\">{\"My K_Nines 🐕\"}</h1> </Button>\n                  {\n                    <AddNfts save={addNft} address={address} />\n                  }\n                </div>\n                <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n                  { ! onlyMine ? nfts.map((_nft) => (\n                    <Nft\n                      key={_nft.index}\n                      nft={{\n                        ..._nft,\n                      }}\n                      pet={petK9}\n                      feed={feedK9}\n                      units={units}\n                      revive={reviveK9}\n                      client_address={address}\n                    />\n                  )) :\n                  nfts.filter(_nft => _nft.owner === address ).map((_nft) => (\n                    <Nft\n                      key={_nft.index}\n                      nft={{\n                        ..._nft,\n                      }}\n                      pet={petK9}\n                      feed={feedK9}\n                      units={units}\n                      revive={reviveK9}\n                      client_address={address}\n\n                    />\n                  ))\n                  }\n                  {console.log(onlyMine)}\n                </Row>\n              </>\n            ) : (\n              <Loader />\n            )}\n          </>\n        );\n      }\n      return null;\n    \n}\n\nNftList.propTypes = {\n    minterContract: PropTypes.instanceOf(Object),\n    updateBalance: PropTypes.func.isRequired,\n  };\n  \nNftList.defaultProps = {\n    minterContract: null,\n};\n  \nexport default NftList;","import { useContract } from \"./useContract\";\nimport Doggo from \"../contracts/Doggo.json\";\nimport DoggoAddress from \"../contracts/DoggoAddress.json\";\n\n// export interface for smart contract\nexport const useDoggoContract = () =>\n  useContract(Doggo.abi, DoggoAddress.Doggo);\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","export default __webpack_public_path__ + \"static/media/background.1c7c59d3.jpg\";","import React from \"react\";\nimport { Container, Nav} from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/minter/Cover\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useBalance, useDoggoContract } from \"./hooks\";\nimport coverImg from \"./assets/img/background.jpg\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance, getBalance } = useBalance();\n  const minterContract = useDoggoContract();\n\n  return (\n    <> \n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              {/*display user wallet*/}\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n\n          </Nav>\n          \n          <main>\n            <Nfts\n              name=\"K_Nines 🐶\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"K_nines\" coverImg={coverImg} connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"K_nines!\",\n        description: \"K_nines are your interactive NFTs pups, keep your k_nines well fed and happy and they will always be yours\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}